import { type NextRequest, NextResponse } from "next/server"

// JWT —Ç–æ–∫–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFICATION_TOKEN =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkX2F0IjoxNzUwMDQ4NDA3LCJhcHBfaWQiOjE3NTAwNDg0MDd9._XmzTDsnTL32ZdatPXnD9fYtwraB0P8S1bj3ragHKXk"

interface NotificationData {
  type: string
  message: string
  txHash?: string
  userAddress?: string
  errorDetails?: string
}

export async function POST(request: NextRequest) {
  try {
    const body: NotificationData = await request.json()
    const { type, message, txHash, userAddress, errorDetails } = body

    let formattedMessage = ""
    let emoji = ""

    switch (type) {
      case "connection":
        emoji = "üîó"
        formattedMessage = `${emoji} **–ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω**\n\n${message}\n\n**–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}`
        break

      case "payment":
        emoji = "üí≥"
        formattedMessage = `${emoji} **–û–ø–ª–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞**\n\n${message}\n\n**–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:** \`${txHash}\`\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** \`${userAddress}\`\n**–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}`
        break

      case "payment_confirmed":
        emoji = "‚úÖ"
        formattedMessage = `${emoji} **–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞**\n\n${message}\n\n**–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:** \`${txHash}\`\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** \`${userAddress}\`\n**–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}`
        break

      case "api_success":
        emoji = "üîç"
        formattedMessage = `${emoji} **–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω**\n\n${message}\n\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** \`${userAddress}\`\n**–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}`
        break

      case "api_error":
        emoji = "‚ùå"
        formattedMessage = `${emoji} **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞**\n\n${message}\n\n**–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}`
        if (errorDetails) {
          formattedMessage += `\n\n**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** \`${errorDetails.slice(0, 200)}...\``
        }
        break

      case "error":
        emoji = "‚ö†Ô∏è"
        formattedMessage = `${emoji} **–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n${message}\n\n**–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}`
        if (errorDetails) {
          formattedMessage += `\n\n**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** \`${errorDetails.slice(0, 200)}...\``
        }
        break

      default:
        emoji = "‚ÑπÔ∏è"
        formattedMessage = `${emoji} **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n${message}\n\n**–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}`
    }

    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notificationPayload = {
      token: NOTIFICATION_TOKEN,
      message: formattedMessage,
      type,
      metadata: {
        txHash,
        userAddress,
        timestamp: new Date().toISOString(),
      },
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    console.log("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", notificationPayload)

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try {
      // –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      // const response = await fetch('https://your-notification-service.com/webhook', {
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //     'Authorization': `Bearer ${NOTIFICATION_TOKEN}`
      //   },
      //   body: JSON.stringify(notificationPayload)
      // })

      // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      const simulatedResponse = {
        success: true,
        messageId: `msg_${Date.now()}`,
        timestamp: new Date().toISOString(),
      }

      return NextResponse.json({
        success: true,
        message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
        response: simulatedResponse,
      })
    } catch (webhookError: any) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", webhookError)

      return NextResponse.json({
        success: false,
        message: "–û—Å–Ω–æ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±",
        error: webhookError.message,
      })
    }
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error)

    return NextResponse.json(
      {
        success: false,
        error: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
      },
      { status: 500 },
    )
  }
}
