import { type NextRequest, NextResponse } from "next/server"

// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π API —Ç–æ–∫–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ–≥–æ –Ω–µ –≤–∏–¥—è—Ç
const API_TOKEN = "5592031950:NxR1cNdr"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { request: query, limit = 100, lang = "ru", userAddress } = body

    if (!query) {
      return NextResponse.json({ error: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 })
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç ${userAddress}: "${query}" (–ª–∏–º–∏—Ç: ${limit}, —è–∑—ã–∫: ${lang})`)

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ LeakOsint API —Å –Ω–∞—à–∏–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    const apiResponse = await fetch("https://leakosintapi.com/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        token: API_TOKEN,
        request: query,
        limit,
        lang,
        type: "json",
      }),
    })

    if (!apiResponse.ok) {
      const errorMessage = `LeakOsint API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${apiResponse.status}`
      console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${errorMessage}`)
      throw new Error(errorMessage)
    }

    const data = await apiResponse.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ API
    if (data["Error code"]) {
      const errorMessage = `–û—à–∏–±–∫–∞ LeakOsint API: ${data["Error code"]}`
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: ${errorMessage}`)
      return NextResponse.json({ error: errorMessage }, { status: 400 })
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    const resultCount = Object.keys(data.List || {}).length
    console.log(`‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω: –ù–∞–π–¥–µ–Ω–æ ${resultCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userAddress}`)

    return NextResponse.json(data)
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error)

    return NextResponse.json(
      {
        error: error.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        details: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
      },
      { status: 500 },
    )
  }
}
